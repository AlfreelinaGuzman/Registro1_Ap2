@page "/Personas"
@page "/Personas/{PersonaId:int}"


@inject IToastService toast
@using BLL
@using Models
@using namespace


<EditForm Models="Personas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="card">
        <div class="card-header">
            <h3>Registro de Personas</h3>
        </div>
        <div class="card-body">
            <form>
                 <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Persona Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Personas.PersonaId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombres*@
                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="Personas.Nombres" class="form-control" />
                    <ValidationMessage For="@(() => Personas.Nombres)" />
                </div>          
            </form>
        </div>
         <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    

    [Parameter]
    public int PersonaId { get; set; }

    private Personas persona = new Personas();
    //private Personas persona = new Personas();

    protected override void OnInitialized()
    {
        Nuevo();
        //@* persona.FechaNacimiento = DateTime.Now;*@
        Buscar();
    }

    private void Nuevo()
    {
        persona = new Personas();
        //persona.FechaNacimiento = DateTime.Now;
    }

    private void Guardar()
    {
         bool guardado;

        guardado = PersonasBLL.Guardar(persona);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    private void Buscar()
    {
         if (persona.PersonaId > 0)
         {
             var encontrado = PersonasBLL.Buscar(persona.PersonaId);
             if (encontrado != null)
                 persona = encontrado;
             else
                 toast.ShowWarning("La persona no fue encontrado");
         }       
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = PersonasBLL.Eliminar(persona.PersonaId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Persona eliminada correctamente");
        }
        else
            toast.ShowError("No fue posible eliminarla persona");     
    }
}